// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package review

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4d, 0x4e, 0xc3, 0x30,
	0x10, 0x85, 0xc9, 0x82, 0x2e, 0x46, 0xb5, 0x8a, 0xbc, 0x34, 0xad, 0x25, 0x96, 0xdd, 0x44, 0x02,
	0x24, 0xb6, 0xfc, 0x04, 0x90, 0x90, 0xb2, 0x0a, 0xea, 0x01, 0xa0, 0xcc, 0xc2, 0x6a, 0x13, 0x07,
	0xdb, 0x2d, 0xe2, 0x26, 0x9c, 0x81, 0x93, 0xb0, 0xe4, 0x08, 0x28, 0x5c, 0x04, 0xd9, 0x8e, 0x9b,
	0x36, 0xa1, 0x42, 0x74, 0x39, 0x6f, 0xde, 0x7b, 0x63, 0x7d, 0x32, 0x10, 0x8d, 0x6a, 0x29, 0xa6,
	0x18, 0x97, 0x4a, 0x1a, 0x49, 0x7b, 0x0a, 0x97, 0x02, 0x5f, 0x18, 0xcc, 0xc5, 0xac, 0xd6, 0x18,
	0x99, 0xca, 0x3c, 0xc7, 0xc2, 0xf8, 0xf1, 0xe4, 0x7d, 0x1f, 0x48, 0xe6, 0x5c, 0xf7, 0x3e, 0x4a,
	0xc7, 0x00, 0x89, 0xc2, 0x07, 0x83, 0xa9, 0x98, 0x21, 0xed, 0xc7, 0xbe, 0x23, 0xb6, 0x13, 0x23,
	0x61, 0xba, 0xc9, 0x4b, 0xf3, 0x4a, 0x2f, 0x60, 0x70, 0x8d, 0x73, 0x34, 0x38, 0xd1, 0xa8, 0xac,
	0x41, 0x53, 0x1e, 0x1c, 0xad, 0x45, 0x86, 0xcf, 0x0b, 0xd4, 0xa6, 0xdd, 0x30, 0x06, 0xf0, 0xc6,
	0xbf, 0x8f, 0x9d, 0x01, 0x24, 0x72, 0x51, 0x18, 0x7f, 0x67, 0xd3, 0xca, 0xc2, 0xd4, 0x38, 0x32,
	0xd4, 0xa5, 0x2c, 0x34, 0xd2, 0x14, 0x48, 0x2a, 0xb4, 0x13, 0xed, 0x6b, 0x34, 0x1d, 0x36, 0xd1,
	0x35, 0x39, 0x3c, 0x70, 0xb4, 0x65, 0x5b, 0xb7, 0x1d, 0x03, 0xf1, 0x74, 0x12, 0x8f, 0x91, 0x0e,
	0x9a, 0xd3, 0x4e, 0x60, 0x6d, 0xc1, 0x46, 0x26, 0xe5, 0xd3, 0xbf, 0x22, 0x97, 0x40, 0x3c, 0x96,
	0x20, 0x1c, 0x75, 0xb1, 0xd6, 0xab, 0x6d, 0x64, 0x6f, 0x81, 0x76, 0xbd, 0x3b, 0xf4, 0x9c, 0x03,
	0x71, 0x50, 0x57, 0x15, 0x9d, 0xd7, 0x8f, 0x36, 0xe0, 0x37, 0x75, 0x35, 0xb1, 0x3b, 0xe8, 0x5b,
	0x94, 0xab, 0xfc, 0xe1, 0x3a, 0xe0, 0xf6, 0xf1, 0xe1, 0xef, 0x4b, 0x5f, 0x75, 0x75, 0xf0, 0x51,
	0xf1, 0xe8, 0xb3, 0xe2, 0xd1, 0x57, 0xc5, 0xa3, 0xb7, 0x6f, 0xbe, 0xf7, 0xd8, 0x73, 0xbf, 0xf8,
	0xf4, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xd5, 0xc6, 0x52, 0xf9, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReviewServiceClient is the client API for ReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReviewServiceClient interface {
	CreateLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*Empty, error)
	DeleteUserLikes(ctx context.Context, in *DeleteUserLikesRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*Empty, error)
	CountLikes(ctx context.Context, in *Like, opts ...grpc.CallOption) (*CountLikesResponse, error)
	ListLikeUsers(ctx context.Context, in *ListLikeUsersRequest, opts ...grpc.CallOption) (*ListLikeUsersResponse, error)
	CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	DeleteComment(ctx context.Context, in *DeleteUserCommentsRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteUserComments(ctx context.Context, in *DeleteUserCommentsRequest, opts ...grpc.CallOption) (*Empty, error)
	CountComments(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*CountCommentsResponse, error)
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
}

type reviewServiceClient struct {
	cc *grpc.ClientConn
}

func NewReviewServiceClient(cc *grpc.ClientConn) ReviewServiceClient {
	return &reviewServiceClient{cc}
}

func (c *reviewServiceClient) CreateLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/review.ReviewService/CreateLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) DeleteUserLikes(ctx context.Context, in *DeleteUserLikesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/review.ReviewService/DeleteUserLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) DeleteLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/review.ReviewService/DeleteLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) CountLikes(ctx context.Context, in *Like, opts ...grpc.CallOption) (*CountLikesResponse, error) {
	out := new(CountLikesResponse)
	err := c.cc.Invoke(ctx, "/review.ReviewService/CountLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) ListLikeUsers(ctx context.Context, in *ListLikeUsersRequest, opts ...grpc.CallOption) (*ListLikeUsersResponse, error) {
	out := new(ListLikeUsersResponse)
	err := c.cc.Invoke(ctx, "/review.ReviewService/ListLikeUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/review.ReviewService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/review.ReviewService/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) DeleteComment(ctx context.Context, in *DeleteUserCommentsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/review.ReviewService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) DeleteUserComments(ctx context.Context, in *DeleteUserCommentsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/review.ReviewService/DeleteUserComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) CountComments(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*CountCommentsResponse, error) {
	out := new(CountCommentsResponse)
	err := c.cc.Invoke(ctx, "/review.ReviewService/CountComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/review.ReviewService/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServiceServer is the server API for ReviewService service.
type ReviewServiceServer interface {
	CreateLike(context.Context, *Like) (*Empty, error)
	DeleteUserLikes(context.Context, *DeleteUserLikesRequest) (*Empty, error)
	DeleteLike(context.Context, *Like) (*Empty, error)
	CountLikes(context.Context, *Like) (*CountLikesResponse, error)
	ListLikeUsers(context.Context, *ListLikeUsersRequest) (*ListLikeUsersResponse, error)
	CreateComment(context.Context, *Comment) (*Comment, error)
	UpdateComment(context.Context, *Comment) (*Comment, error)
	DeleteComment(context.Context, *DeleteUserCommentsRequest) (*Empty, error)
	DeleteUserComments(context.Context, *DeleteUserCommentsRequest) (*Empty, error)
	CountComments(context.Context, *Comment) (*CountCommentsResponse, error)
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
}

// UnimplementedReviewServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReviewServiceServer struct {
}

func (*UnimplementedReviewServiceServer) CreateLike(ctx context.Context, req *Like) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLike not implemented")
}
func (*UnimplementedReviewServiceServer) DeleteUserLikes(ctx context.Context, req *DeleteUserLikesRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserLikes not implemented")
}
func (*UnimplementedReviewServiceServer) DeleteLike(ctx context.Context, req *Like) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}
func (*UnimplementedReviewServiceServer) CountLikes(ctx context.Context, req *Like) (*CountLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLikes not implemented")
}
func (*UnimplementedReviewServiceServer) ListLikeUsers(ctx context.Context, req *ListLikeUsersRequest) (*ListLikeUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLikeUsers not implemented")
}
func (*UnimplementedReviewServiceServer) CreateComment(ctx context.Context, req *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (*UnimplementedReviewServiceServer) UpdateComment(ctx context.Context, req *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (*UnimplementedReviewServiceServer) DeleteComment(ctx context.Context, req *DeleteUserCommentsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (*UnimplementedReviewServiceServer) DeleteUserComments(ctx context.Context, req *DeleteUserCommentsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserComments not implemented")
}
func (*UnimplementedReviewServiceServer) CountComments(ctx context.Context, req *Comment) (*CountCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountComments not implemented")
}
func (*UnimplementedReviewServiceServer) ListComments(ctx context.Context, req *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}

func RegisterReviewServiceServer(s *grpc.Server, srv ReviewServiceServer) {
	s.RegisterService(&_ReviewService_serviceDesc, srv)
}

func _ReviewService_CreateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Like)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).CreateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/CreateLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).CreateLike(ctx, req.(*Like))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_DeleteUserLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).DeleteUserLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/DeleteUserLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).DeleteUserLikes(ctx, req.(*DeleteUserLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Like)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/DeleteLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).DeleteLike(ctx, req.(*Like))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_CountLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Like)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).CountLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/CountLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).CountLikes(ctx, req.(*Like))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_ListLikeUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLikeUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).ListLikeUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/ListLikeUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).ListLikeUsers(ctx, req.(*ListLikeUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).CreateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).UpdateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).DeleteComment(ctx, req.(*DeleteUserCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_DeleteUserComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).DeleteUserComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/DeleteUserComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).DeleteUserComments(ctx, req.(*DeleteUserCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_CountComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).CountComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/CountComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).CountComments(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReviewService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "review.ReviewService",
	HandlerType: (*ReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLike",
			Handler:    _ReviewService_CreateLike_Handler,
		},
		{
			MethodName: "DeleteUserLikes",
			Handler:    _ReviewService_DeleteUserLikes_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _ReviewService_DeleteLike_Handler,
		},
		{
			MethodName: "CountLikes",
			Handler:    _ReviewService_CountLikes_Handler,
		},
		{
			MethodName: "ListLikeUsers",
			Handler:    _ReviewService_ListLikeUsers_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _ReviewService_CreateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _ReviewService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _ReviewService_DeleteComment_Handler,
		},
		{
			MethodName: "DeleteUserComments",
			Handler:    _ReviewService_DeleteUserComments_Handler,
		},
		{
			MethodName: "CountComments",
			Handler:    _ReviewService_CountComments_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _ReviewService_ListComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
