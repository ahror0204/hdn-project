// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: business.proto

package business

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Business struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	SalonName            string   `protobuf:"bytes,2,opt,name=salon_name,json=salonName,proto3" json:"salon_name"`
	PhoneNumbers         []string `protobuf:"bytes,3,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status"`
	Staff                []*Staff `protobuf:"bytes,5,rep,name=staff,proto3" json:"staff"`
	Location             string   `protobuf:"bytes,6,opt,name=location,proto3" json:"location"`
	CreatedAt            string   `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Business) Reset()         { *m = Business{} }
func (m *Business) String() string { return proto.CompactTextString(m) }
func (*Business) ProtoMessage()    {}
func (*Business) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4ce4f7d40c421f, []int{0}
}
func (m *Business) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Business) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Business.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Business) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Business.Merge(m, src)
}
func (m *Business) XXX_Size() int {
	return m.Size()
}
func (m *Business) XXX_DiscardUnknown() {
	xxx_messageInfo_Business.DiscardUnknown(m)
}

var xxx_messageInfo_Business proto.InternalMessageInfo

func (m *Business) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Business) GetSalonName() string {
	if m != nil {
		return m.SalonName
	}
	return ""
}

func (m *Business) GetPhoneNumbers() []string {
	if m != nil {
		return m.PhoneNumbers
	}
	return nil
}

func (m *Business) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Business) GetStaff() []*Staff {
	if m != nil {
		return m.Staff
	}
	return nil
}

func (m *Business) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Business) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Business) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Business) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type Staff struct {
	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FirstName    string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName     string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	PhoneNumbers []string `protobuf:"bytes,4,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers"`
	Cost         int64    `protobuf:"varint,5,opt,name=cost,proto3" json:"cost"`
	Status       string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
	// string comment_id = 7;
	BusinessId string `protobuf:"bytes,7,opt,name=business_id,json=businessId,proto3" json:"business_id"`
	CalendarId string `protobuf:"bytes,8,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id"`
	UserId     string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id"`
	// string men_services_id = 11;
	// string women_services_id = 12;
	CreatedAt            string   `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Staff) Reset()         { *m = Staff{} }
func (m *Staff) String() string { return proto.CompactTextString(m) }
func (*Staff) ProtoMessage()    {}
func (*Staff) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4ce4f7d40c421f, []int{1}
}
func (m *Staff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staff.Merge(m, src)
}
func (m *Staff) XXX_Size() int {
	return m.Size()
}
func (m *Staff) XXX_DiscardUnknown() {
	xxx_messageInfo_Staff.DiscardUnknown(m)
}

var xxx_messageInfo_Staff proto.InternalMessageInfo

func (m *Staff) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Staff) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Staff) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Staff) GetPhoneNumbers() []string {
	if m != nil {
		return m.PhoneNumbers
	}
	return nil
}

func (m *Staff) GetCost() int64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Staff) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Staff) GetBusinessId() string {
	if m != nil {
		return m.BusinessId
	}
	return ""
}

func (m *Staff) GetCalendarId() string {
	if m != nil {
		return m.CalendarId
	}
	return ""
}

func (m *Staff) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Staff) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Staff) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Staff) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type MenServices struct {
	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	HairCut        bool   `protobuf:"varint,2,opt,name=hair_cut,json=hairCut,proto3" json:"hair_cut"`
	BeardCut       bool   `protobuf:"varint,3,opt,name=beard_cut,json=beardCut,proto3" json:"beard_cut"`
	HairColoring   bool   `protobuf:"varint,4,opt,name=hair_coloring,json=hairColoring,proto3" json:"hair_coloring"`
	SpecialHairCut bool   `protobuf:"varint,5,opt,name=special_hair_cut,json=specialHairCut,proto3" json:"special_hair_cut"`
	BeardColoring  bool   `protobuf:"varint,6,opt,name=beard_coloring,json=beardColoring,proto3" json:"beard_coloring"`
	BeardTrim      bool   `protobuf:"varint,7,opt,name=beard_trim,json=beardTrim,proto3" json:"beard_trim"`
	BeardShave     bool   `protobuf:"varint,8,opt,name=beard_shave,json=beardShave,proto3" json:"beard_shave"`
	FaceShave      bool   `protobuf:"varint,9,opt,name=face_shave,json=faceShave,proto3" json:"face_shave"`
	BoyHairCut     bool   `protobuf:"varint,10,opt,name=boy_hair_cut,json=boyHairCut,proto3" json:"boy_hair_cut"`
	// string others = 11;
	UserId               string   `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenServices) Reset()         { *m = MenServices{} }
func (m *MenServices) String() string { return proto.CompactTextString(m) }
func (*MenServices) ProtoMessage()    {}
func (*MenServices) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4ce4f7d40c421f, []int{2}
}
func (m *MenServices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenServices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenServices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenServices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenServices.Merge(m, src)
}
func (m *MenServices) XXX_Size() int {
	return m.Size()
}
func (m *MenServices) XXX_DiscardUnknown() {
	xxx_messageInfo_MenServices.DiscardUnknown(m)
}

var xxx_messageInfo_MenServices proto.InternalMessageInfo

func (m *MenServices) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MenServices) GetHairCut() bool {
	if m != nil {
		return m.HairCut
	}
	return false
}

func (m *MenServices) GetBeardCut() bool {
	if m != nil {
		return m.BeardCut
	}
	return false
}

func (m *MenServices) GetHairColoring() bool {
	if m != nil {
		return m.HairColoring
	}
	return false
}

func (m *MenServices) GetSpecialHairCut() bool {
	if m != nil {
		return m.SpecialHairCut
	}
	return false
}

func (m *MenServices) GetBeardColoring() bool {
	if m != nil {
		return m.BeardColoring
	}
	return false
}

func (m *MenServices) GetBeardTrim() bool {
	if m != nil {
		return m.BeardTrim
	}
	return false
}

func (m *MenServices) GetBeardShave() bool {
	if m != nil {
		return m.BeardShave
	}
	return false
}

func (m *MenServices) GetFaceShave() bool {
	if m != nil {
		return m.FaceShave
	}
	return false
}

func (m *MenServices) GetBoyHairCut() bool {
	if m != nil {
		return m.BoyHairCut
	}
	return false
}

func (m *MenServices) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type WomenServices struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	HairCut              bool     `protobuf:"varint,2,opt,name=hair_cut,json=hairCut,proto3" json:"hair_cut"`
	HairColoring         bool     `protobuf:"varint,3,opt,name=hair_coloring,json=hairColoring,proto3" json:"hair_coloring"`
	SpecialHairCut       bool     `protobuf:"varint,4,opt,name=special_hair_cut,json=specialHairCut,proto3" json:"special_hair_cut"`
	EyebrowArching       bool     `protobuf:"varint,5,opt,name=eyebrow_arching,json=eyebrowArching,proto3" json:"eyebrow_arching"`
	UserId               string   `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WomenServices) Reset()         { *m = WomenServices{} }
func (m *WomenServices) String() string { return proto.CompactTextString(m) }
func (*WomenServices) ProtoMessage()    {}
func (*WomenServices) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4ce4f7d40c421f, []int{3}
}
func (m *WomenServices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WomenServices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WomenServices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WomenServices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WomenServices.Merge(m, src)
}
func (m *WomenServices) XXX_Size() int {
	return m.Size()
}
func (m *WomenServices) XXX_DiscardUnknown() {
	xxx_messageInfo_WomenServices.DiscardUnknown(m)
}

var xxx_messageInfo_WomenServices proto.InternalMessageInfo

func (m *WomenServices) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *WomenServices) GetHairCut() bool {
	if m != nil {
		return m.HairCut
	}
	return false
}

func (m *WomenServices) GetHairColoring() bool {
	if m != nil {
		return m.HairColoring
	}
	return false
}

func (m *WomenServices) GetSpecialHairCut() bool {
	if m != nil {
		return m.SpecialHairCut
	}
	return false
}

func (m *WomenServices) GetEyebrowArching() bool {
	if m != nil {
		return m.EyebrowArching
	}
	return false
}

func (m *WomenServices) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ServiceTypeDef struct {
	MenService           *MenServices   `protobuf:"bytes,1,opt,name=men_service,json=menService,proto3" json:"men_service"`
	WomenService         *WomenServices `protobuf:"bytes,2,opt,name=women_service,json=womenService,proto3" json:"women_service"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServiceTypeDef) Reset()         { *m = ServiceTypeDef{} }
func (m *ServiceTypeDef) String() string { return proto.CompactTextString(m) }
func (*ServiceTypeDef) ProtoMessage()    {}
func (*ServiceTypeDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4ce4f7d40c421f, []int{4}
}
func (m *ServiceTypeDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceTypeDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceTypeDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceTypeDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceTypeDef.Merge(m, src)
}
func (m *ServiceTypeDef) XXX_Size() int {
	return m.Size()
}
func (m *ServiceTypeDef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceTypeDef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceTypeDef proto.InternalMessageInfo

func (m *ServiceTypeDef) GetMenService() *MenServices {
	if m != nil {
		return m.MenService
	}
	return nil
}

func (m *ServiceTypeDef) GetWomenService() *WomenServices {
	if m != nil {
		return m.WomenService
	}
	return nil
}

type Id struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4ce4f7d40c421f, []int{5}
}
func (m *Id) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Id.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return m.Size()
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetAllBusinessResponse struct {
	Business             []*Business `protobuf:"bytes,1,rep,name=business,proto3" json:"business"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetAllBusinessResponse) Reset()         { *m = GetAllBusinessResponse{} }
func (m *GetAllBusinessResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllBusinessResponse) ProtoMessage()    {}
func (*GetAllBusinessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4ce4f7d40c421f, []int{6}
}
func (m *GetAllBusinessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllBusinessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllBusinessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllBusinessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllBusinessResponse.Merge(m, src)
}
func (m *GetAllBusinessResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllBusinessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllBusinessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllBusinessResponse proto.InternalMessageInfo

func (m *GetAllBusinessResponse) GetBusiness() []*Business {
	if m != nil {
		return m.Business
	}
	return nil
}

type GetListBusinessRequest struct {
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit"`
	Page                 int64    `protobuf:"varint,2,opt,name=page,proto3" json:"page"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetListBusinessRequest) Reset()         { *m = GetListBusinessRequest{} }
func (m *GetListBusinessRequest) String() string { return proto.CompactTextString(m) }
func (*GetListBusinessRequest) ProtoMessage()    {}
func (*GetListBusinessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4ce4f7d40c421f, []int{7}
}
func (m *GetListBusinessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetListBusinessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetListBusinessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetListBusinessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetListBusinessRequest.Merge(m, src)
}
func (m *GetListBusinessRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetListBusinessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetListBusinessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetListBusinessRequest proto.InternalMessageInfo

func (m *GetListBusinessRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetListBusinessRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type AllMenSetvices struct {
	MenServices          []*MenServices `protobuf:"bytes,1,rep,name=men_services,json=menServices,proto3" json:"men_services"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AllMenSetvices) Reset()         { *m = AllMenSetvices{} }
func (m *AllMenSetvices) String() string { return proto.CompactTextString(m) }
func (*AllMenSetvices) ProtoMessage()    {}
func (*AllMenSetvices) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4ce4f7d40c421f, []int{8}
}
func (m *AllMenSetvices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllMenSetvices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllMenSetvices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllMenSetvices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllMenSetvices.Merge(m, src)
}
func (m *AllMenSetvices) XXX_Size() int {
	return m.Size()
}
func (m *AllMenSetvices) XXX_DiscardUnknown() {
	xxx_messageInfo_AllMenSetvices.DiscardUnknown(m)
}

var xxx_messageInfo_AllMenSetvices proto.InternalMessageInfo

func (m *AllMenSetvices) GetMenServices() []*MenServices {
	if m != nil {
		return m.MenServices
	}
	return nil
}

type AllWomenSetvices struct {
	WomenServices        []*WomenServices `protobuf:"bytes,1,rep,name=women_services,json=womenServices,proto3" json:"women_services"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AllWomenSetvices) Reset()         { *m = AllWomenSetvices{} }
func (m *AllWomenSetvices) String() string { return proto.CompactTextString(m) }
func (*AllWomenSetvices) ProtoMessage()    {}
func (*AllWomenSetvices) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb4ce4f7d40c421f, []int{9}
}
func (m *AllWomenSetvices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllWomenSetvices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllWomenSetvices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllWomenSetvices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllWomenSetvices.Merge(m, src)
}
func (m *AllWomenSetvices) XXX_Size() int {
	return m.Size()
}
func (m *AllWomenSetvices) XXX_DiscardUnknown() {
	xxx_messageInfo_AllWomenSetvices.DiscardUnknown(m)
}

var xxx_messageInfo_AllWomenSetvices proto.InternalMessageInfo

func (m *AllWomenSetvices) GetWomenServices() []*WomenServices {
	if m != nil {
		return m.WomenServices
	}
	return nil
}

func init() {
	proto.RegisterType((*Business)(nil), "business.Business")
	proto.RegisterType((*Staff)(nil), "business.Staff")
	proto.RegisterType((*MenServices)(nil), "business.MenServices")
	proto.RegisterType((*WomenServices)(nil), "business.WomenServices")
	proto.RegisterType((*ServiceTypeDef)(nil), "business.ServiceTypeDef")
	proto.RegisterType((*Id)(nil), "business.Id")
	proto.RegisterType((*GetAllBusinessResponse)(nil), "business.GetAllBusinessResponse")
	proto.RegisterType((*GetListBusinessRequest)(nil), "business.GetListBusinessRequest")
	proto.RegisterType((*AllMenSetvices)(nil), "business.AllMenSetvices")
	proto.RegisterType((*AllWomenSetvices)(nil), "business.AllWomenSetvices")
}

func init() { proto.RegisterFile("business.proto", fileDescriptor_fb4ce4f7d40c421f) }

var fileDescriptor_fb4ce4f7d40c421f = []byte{
	// 963 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x66, 0xbd, 0xb1, 0xb3, 0x3e, 0xb6, 0x37, 0x61, 0x68, 0x9b, 0xc5, 0xa8, 0xc1, 0x72, 0x55,
	0xe1, 0xab, 0x20, 0xa5, 0x02, 0xb5, 0xa2, 0xaa, 0xb0, 0x53, 0x48, 0x8d, 0xa0, 0x17, 0x9b, 0x46,
	0x5c, 0x5a, 0xe3, 0xdd, 0x49, 0xbd, 0xd2, 0xfe, 0x98, 0x9d, 0xd9, 0x46, 0x7e, 0x01, 0x1e, 0x01,
	0xf1, 0x46, 0x20, 0x71, 0xc3, 0x03, 0x70, 0x81, 0x82, 0x78, 0x0f, 0xb4, 0x67, 0x66, 0xff, 0xbc,
	0xeb, 0x10, 0xf5, 0xce, 0xf3, 0x7d, 0xe7, 0x3b, 0x73, 0xe6, 0x3b, 0x67, 0x67, 0x0c, 0xe6, 0x32,
	0xe1, 0x5e, 0xc8, 0x38, 0x3f, 0x59, 0xc7, 0x91, 0x88, 0x88, 0x91, 0xad, 0x87, 0x90, 0x70, 0x16,
	0x4b, 0x74, 0xfc, 0x4b, 0x0b, 0x8c, 0x99, 0x22, 0x88, 0x09, 0x2d, 0xcf, 0xb5, 0xb4, 0x91, 0x36,
	0xe9, 0xda, 0x2d, 0xcf, 0x25, 0x0f, 0x01, 0x38, 0xf5, 0xa3, 0x70, 0x11, 0xd2, 0x80, 0x59, 0x2d,
	0xc4, 0xbb, 0x88, 0xbc, 0xa6, 0x01, 0x23, 0x8f, 0x60, 0xb0, 0x5e, 0x45, 0x21, 0x5b, 0x84, 0x49,
	0xb0, 0x64, 0x31, 0xb7, 0xf4, 0x91, 0x3e, 0xe9, 0xda, 0x7d, 0x04, 0x5f, 0x4b, 0x8c, 0x3c, 0x80,
	0x0e, 0x17, 0x54, 0x24, 0xdc, 0xda, 0x43, 0xbd, 0x5a, 0x91, 0xc7, 0xd0, 0xe6, 0x82, 0x5e, 0x5d,
	0x59, 0xed, 0x91, 0x3e, 0xe9, 0x9d, 0x1e, 0x9c, 0xe4, 0xe5, 0x5e, 0xa4, 0xb0, 0x2d, 0x59, 0x32,
	0x04, 0xc3, 0x8f, 0x1c, 0x2a, 0xbc, 0x28, 0xb4, 0x3a, 0x98, 0x20, 0x5f, 0xa7, 0xe5, 0x39, 0x31,
	0xa3, 0x82, 0xb9, 0x0b, 0x2a, 0xac, 0x7d, 0x59, 0x9e, 0x42, 0xa6, 0x22, 0xa5, 0x93, 0xb5, 0x9b,
	0xd1, 0x86, 0xa4, 0x15, 0x22, 0x69, 0x97, 0xf9, 0x4c, 0xd1, 0x5d, 0x49, 0x2b, 0x64, 0x2a, 0xc6,
	0x7f, 0xb5, 0xa0, 0x8d, 0x95, 0x34, 0xb9, 0x72, 0xe5, 0xc5, 0x5c, 0x54, 0x5c, 0x41, 0x04, 0x5d,
	0xf9, 0x04, 0xba, 0x3e, 0xcd, 0x58, 0x5d, 0x95, 0x4c, 0x15, 0x59, 0xb3, 0x6c, 0xaf, 0xc1, 0x32,
	0x02, 0x7b, 0x4e, 0xc4, 0x85, 0xd5, 0x1e, 0x69, 0x13, 0xdd, 0xc6, 0xdf, 0x25, 0x1b, 0x3b, 0x15,
	0x1b, 0x3f, 0x85, 0x5e, 0x66, 0xdc, 0xc2, 0x73, 0x95, 0x09, 0x90, 0x41, 0x73, 0x37, 0x0d, 0x70,
	0xa8, 0xcf, 0x42, 0x97, 0xc6, 0x69, 0x80, 0xb4, 0x01, 0x32, 0x68, 0xee, 0x92, 0x23, 0xd8, 0x4f,
	0xe7, 0x21, 0x25, 0xa5, 0x09, 0x9d, 0x74, 0x39, 0x77, 0xb7, 0xec, 0x85, 0xdb, 0xed, 0xed, 0xdd,
	0x6e, 0x6f, 0x7f, 0xdb, 0xde, 0x7f, 0x5b, 0xd0, 0xfb, 0x81, 0x85, 0x17, 0x2c, 0x7e, 0xe7, 0x39,
	0xac, 0x3e, 0x7a, 0x1f, 0x83, 0xb1, 0xa2, 0x5e, 0xbc, 0x70, 0x12, 0x81, 0x16, 0x1b, 0xf6, 0x7e,
	0xba, 0x3e, 0x4b, 0x44, 0x6a, 0xf0, 0x92, 0xd1, 0xd8, 0x45, 0x4e, 0x47, 0xce, 0x40, 0x20, 0x25,
	0x1f, 0xc1, 0x40, 0xea, 0x22, 0x3f, 0x8a, 0xbd, 0xf0, 0x2d, 0x4e, 0x9d, 0x61, 0xf7, 0x51, 0xac,
	0x30, 0x32, 0x81, 0x43, 0xbe, 0x66, 0x8e, 0x47, 0xfd, 0x45, 0xbe, 0x49, 0x1b, 0xe3, 0x4c, 0x85,
	0xbf, 0x52, 0x7b, 0x3d, 0x06, 0x53, 0xed, 0x95, 0xe5, 0xeb, 0x60, 0xdc, 0x40, 0x6e, 0x98, 0x25,
	0x7c, 0x08, 0x20, 0xc3, 0x44, 0xec, 0x05, 0xd8, 0x04, 0xc3, 0x96, 0x45, 0xbe, 0x89, 0xbd, 0x00,
	0x9b, 0x84, 0x34, 0x5f, 0xd1, 0x77, 0x0c, 0x7b, 0x60, 0xd8, 0x52, 0x71, 0x91, 0x22, 0x38, 0x52,
	0xd4, 0x61, 0x8a, 0xef, 0x4a, 0x7d, 0x8a, 0x48, 0x7a, 0x04, 0xfd, 0x65, 0xb4, 0x29, 0x6a, 0x05,
	0x95, 0x20, 0xda, 0x64, 0x75, 0x96, 0x9a, 0xd8, 0x2b, 0x37, 0x71, 0xfc, 0x87, 0x06, 0x83, 0x1f,
	0xa3, 0xe0, 0xfd, 0x9c, 0xae, 0x99, 0xa9, 0xdf, 0xd1, 0xcc, 0xbd, 0x46, 0x33, 0x3f, 0x83, 0x03,
	0xb6, 0x61, 0xcb, 0x38, 0xba, 0x5e, 0xd0, 0xd8, 0x59, 0xa5, 0x09, 0x95, 0xeb, 0x0a, 0x9e, 0x4a,
	0xb4, 0x7c, 0x9a, 0x4e, 0xe5, 0x34, 0x3f, 0x6b, 0x60, 0xaa, 0x83, 0xbc, 0xd9, 0xac, 0xd9, 0x4b,
	0x76, 0x45, 0xbe, 0x84, 0x5e, 0xc0, 0xc2, 0x05, 0x97, 0x28, 0x9e, 0xab, 0x77, 0x7a, 0xbf, 0xb8,
	0x4d, 0x4a, 0x43, 0x66, 0x43, 0xe1, 0x03, 0x79, 0x0e, 0x83, 0xeb, 0xa8, 0xac, 0x6c, 0xa1, 0xf2,
	0xa8, 0x50, 0x56, 0x6c, 0xb3, 0xfb, 0xd7, 0xa5, 0xe5, 0xf8, 0x1e, 0xb4, 0xe6, 0xee, 0xb6, 0x95,
	0xe3, 0x57, 0xf0, 0xe0, 0x9c, 0x89, 0xa9, 0xef, 0x67, 0x37, 0xaa, 0xcd, 0xf8, 0x3a, 0x0a, 0x39,
	0x23, 0x27, 0x90, 0x5f, 0xbf, 0x96, 0x86, 0x17, 0x1e, 0x29, 0x36, 0xca, 0xa3, 0xf3, 0x98, 0xf1,
	0x0c, 0x33, 0x7d, 0xef, 0x71, 0x51, 0xa4, 0xfa, 0x29, 0x61, 0x5c, 0x90, 0x7b, 0xd0, 0xf6, 0xbd,
	0xc0, 0x13, 0xb8, 0xad, 0x6e, 0xcb, 0x45, 0x7a, 0x65, 0xac, 0xe9, 0x5b, 0x79, 0x08, 0xdd, 0xc6,
	0xdf, 0xe3, 0xef, 0xc0, 0x9c, 0xfa, 0x3e, 0x9e, 0x5f, 0xc8, 0xd6, 0x3f, 0x85, 0x7e, 0xe9, 0xc4,
	0x59, 0x25, 0x3b, 0xcc, 0xea, 0x95, 0x4e, 0x3f, 0xb6, 0xe1, 0x70, 0xea, 0xfb, 0xca, 0x11, 0x95,
	0xed, 0x05, 0x98, 0x15, 0x07, 0xb3, 0x7c, 0x3b, 0x2d, 0x1c, 0x94, 0x2d, 0xe4, 0xa7, 0xbf, 0xed,
	0xc3, 0x41, 0x76, 0xba, 0xac, 0x2b, 0x4f, 0xc1, 0x3c, 0xc3, 0x1b, 0x26, 0x7f, 0x93, 0x1a, 0x7c,
	0x1a, 0x36, 0x60, 0xe4, 0x0b, 0x30, 0x2f, 0xf1, 0xf2, 0xb9, 0x55, 0x59, 0x7a, 0x66, 0xbe, 0x09,
	0xd6, 0x62, 0x43, 0x3e, 0x07, 0xf3, 0x25, 0x5e, 0x4a, 0xb9, 0xac, 0x5f, 0x84, 0xcc, 0xdd, 0xba,
	0xe0, 0x09, 0x1c, 0x9c, 0x33, 0x31, 0xdb, 0xcc, 0xdd, 0x1d, 0x8a, 0xa6, 0xe2, 0xce, 0xc0, 0xac,
	0x0e, 0x06, 0xd9, 0xce, 0x3b, 0x1c, 0x15, 0xc0, 0x8e, 0x19, 0xba, 0xc4, 0x9d, 0xcb, 0x33, 0x41,
	0xaa, 0xa2, 0x86, 0x71, 0xb9, 0x43, 0xda, 0x67, 0x30, 0x90, 0x96, 0x67, 0x3d, 0x30, 0x0b, 0xc9,
	0x25, 0x67, 0xf1, 0xd0, 0x2a, 0x3d, 0xcd, 0xd5, 0x6f, 0x6f, 0x06, 0x96, 0xf4, 0xbc, 0x98, 0x9b,
	0xd9, 0xe6, 0x52, 0xbe, 0x1e, 0xcd, 0x53, 0x55, 0xf7, 0xf3, 0x5b, 0x18, 0xca, 0x1c, 0xe5, 0x59,
	0xc9, 0xb3, 0xec, 0x9a, 0xa5, 0x7a, 0x9e, 0xe7, 0x70, 0xff, 0x9c, 0x89, 0x86, 0x42, 0xaa, 0xdd,
	0x69, 0x2e, 0x8b, 0x7c, 0x0d, 0x47, 0xe7, 0x4c, 0x34, 0x96, 0x50, 0xd5, 0xef, 0x2a, 0x88, 0x3c,
	0x03, 0x4b, 0x0e, 0xd2, 0xff, 0x96, 0x50, 0x2b, 0xfd, 0x2b, 0x18, 0x4a, 0xe9, 0x1d, 0xf6, 0xaf,
	0x89, 0x5f, 0xc0, 0x87, 0xb2, 0xb1, 0xe5, 0x0f, 0xbd, 0x36, 0x5d, 0xa5, 0x1e, 0x6e, 0x85, 0xce,
	0xe0, 0x23, 0xa9, 0xaf, 0x7e, 0xdc, 0xb5, 0x0c, 0xc3, 0x4a, 0x86, 0x4a, 0xf0, 0xec, 0xf0, 0xf7,
	0x9b, 0x63, 0xed, 0xcf, 0x9b, 0x63, 0xed, 0xef, 0x9b, 0x63, 0xed, 0xd7, 0x7f, 0x8e, 0x3f, 0x58,
	0x76, 0xf0, 0xdf, 0xe5, 0x93, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x84, 0x19, 0x5d, 0x3c, 0x85,
	0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BusinessServiceClient is the client API for BusinessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BusinessServiceClient interface {
	CreateBusiness(ctx context.Context, in *Business, opts ...grpc.CallOption) (*Business, error)
	UpdateBusiness(ctx context.Context, in *Business, opts ...grpc.CallOption) (*Empty, error)
	DeleteBusiness(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetByIdBusiness(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Business, error)
	GetAllBusiness(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllBusinessResponse, error)
	GetListBusiness(ctx context.Context, in *GetListBusinessRequest, opts ...grpc.CallOption) (*GetAllBusinessResponse, error)
	//----------------------------Service----------------------------------------
	CreateService(ctx context.Context, in *User, opts ...grpc.CallOption) (*ServiceTypeDef, error)
	UpdateMenServiceByUserId(ctx context.Context, in *MenServices, opts ...grpc.CallOption) (*Empty, error)
	UpdateWomenServiceByUserId(ctx context.Context, in *WomenServices, opts ...grpc.CallOption) (*Empty, error)
	GetMenServiceByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MenServices, error)
	GetWomenServiceByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WomenServices, error)
	DeleteMenServiceByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	DeleteWomenServiceByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetAllMenSetvices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllMenSetvices, error)
	GetAllWomenSetvices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllWomenSetvices, error)
}

type businessServiceClient struct {
	cc *grpc.ClientConn
}

func NewBusinessServiceClient(cc *grpc.ClientConn) BusinessServiceClient {
	return &businessServiceClient{cc}
}

func (c *businessServiceClient) CreateBusiness(ctx context.Context, in *Business, opts ...grpc.CallOption) (*Business, error) {
	out := new(Business)
	err := c.cc.Invoke(ctx, "/business.BusinessService/CreateBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) UpdateBusiness(ctx context.Context, in *Business, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/business.BusinessService/UpdateBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) DeleteBusiness(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/business.BusinessService/DeleteBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetByIdBusiness(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Business, error) {
	out := new(Business)
	err := c.cc.Invoke(ctx, "/business.BusinessService/GetByIdBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetAllBusiness(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllBusinessResponse, error) {
	out := new(GetAllBusinessResponse)
	err := c.cc.Invoke(ctx, "/business.BusinessService/GetAllBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetListBusiness(ctx context.Context, in *GetListBusinessRequest, opts ...grpc.CallOption) (*GetAllBusinessResponse, error) {
	out := new(GetAllBusinessResponse)
	err := c.cc.Invoke(ctx, "/business.BusinessService/GetListBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) CreateService(ctx context.Context, in *User, opts ...grpc.CallOption) (*ServiceTypeDef, error) {
	out := new(ServiceTypeDef)
	err := c.cc.Invoke(ctx, "/business.BusinessService/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) UpdateMenServiceByUserId(ctx context.Context, in *MenServices, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/business.BusinessService/UpdateMenServiceByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) UpdateWomenServiceByUserId(ctx context.Context, in *WomenServices, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/business.BusinessService/UpdateWomenServiceByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetMenServiceByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MenServices, error) {
	out := new(MenServices)
	err := c.cc.Invoke(ctx, "/business.BusinessService/GetMenServiceByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetWomenServiceByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WomenServices, error) {
	out := new(WomenServices)
	err := c.cc.Invoke(ctx, "/business.BusinessService/GetWomenServiceByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) DeleteMenServiceByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/business.BusinessService/DeleteMenServiceByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) DeleteWomenServiceByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/business.BusinessService/DeleteWomenServiceByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetAllMenSetvices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllMenSetvices, error) {
	out := new(AllMenSetvices)
	err := c.cc.Invoke(ctx, "/business.BusinessService/GetAllMenSetvices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetAllWomenSetvices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllWomenSetvices, error) {
	out := new(AllWomenSetvices)
	err := c.cc.Invoke(ctx, "/business.BusinessService/GetAllWomenSetvices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessServiceServer is the server API for BusinessService service.
type BusinessServiceServer interface {
	CreateBusiness(context.Context, *Business) (*Business, error)
	UpdateBusiness(context.Context, *Business) (*Empty, error)
	DeleteBusiness(context.Context, *Id) (*Empty, error)
	GetByIdBusiness(context.Context, *Id) (*Business, error)
	GetAllBusiness(context.Context, *Empty) (*GetAllBusinessResponse, error)
	GetListBusiness(context.Context, *GetListBusinessRequest) (*GetAllBusinessResponse, error)
	//----------------------------Service----------------------------------------
	CreateService(context.Context, *User) (*ServiceTypeDef, error)
	UpdateMenServiceByUserId(context.Context, *MenServices) (*Empty, error)
	UpdateWomenServiceByUserId(context.Context, *WomenServices) (*Empty, error)
	GetMenServiceByUserId(context.Context, *Id) (*MenServices, error)
	GetWomenServiceByUserId(context.Context, *Id) (*WomenServices, error)
	DeleteMenServiceByUserId(context.Context, *Id) (*Empty, error)
	DeleteWomenServiceByUserId(context.Context, *Id) (*Empty, error)
	GetAllMenSetvices(context.Context, *Empty) (*AllMenSetvices, error)
	GetAllWomenSetvices(context.Context, *Empty) (*AllWomenSetvices, error)
}

// UnimplementedBusinessServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBusinessServiceServer struct {
}

func (*UnimplementedBusinessServiceServer) CreateBusiness(ctx context.Context, req *Business) (*Business, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusiness not implemented")
}
func (*UnimplementedBusinessServiceServer) UpdateBusiness(ctx context.Context, req *Business) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusiness not implemented")
}
func (*UnimplementedBusinessServiceServer) DeleteBusiness(ctx context.Context, req *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusiness not implemented")
}
func (*UnimplementedBusinessServiceServer) GetByIdBusiness(ctx context.Context, req *Id) (*Business, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdBusiness not implemented")
}
func (*UnimplementedBusinessServiceServer) GetAllBusiness(ctx context.Context, req *Empty) (*GetAllBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBusiness not implemented")
}
func (*UnimplementedBusinessServiceServer) GetListBusiness(ctx context.Context, req *GetListBusinessRequest) (*GetAllBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListBusiness not implemented")
}
func (*UnimplementedBusinessServiceServer) CreateService(ctx context.Context, req *User) (*ServiceTypeDef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (*UnimplementedBusinessServiceServer) UpdateMenServiceByUserId(ctx context.Context, req *MenServices) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenServiceByUserId not implemented")
}
func (*UnimplementedBusinessServiceServer) UpdateWomenServiceByUserId(ctx context.Context, req *WomenServices) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWomenServiceByUserId not implemented")
}
func (*UnimplementedBusinessServiceServer) GetMenServiceByUserId(ctx context.Context, req *Id) (*MenServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenServiceByUserId not implemented")
}
func (*UnimplementedBusinessServiceServer) GetWomenServiceByUserId(ctx context.Context, req *Id) (*WomenServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWomenServiceByUserId not implemented")
}
func (*UnimplementedBusinessServiceServer) DeleteMenServiceByUserId(ctx context.Context, req *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenServiceByUserId not implemented")
}
func (*UnimplementedBusinessServiceServer) DeleteWomenServiceByUserId(ctx context.Context, req *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWomenServiceByUserId not implemented")
}
func (*UnimplementedBusinessServiceServer) GetAllMenSetvices(ctx context.Context, req *Empty) (*AllMenSetvices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMenSetvices not implemented")
}
func (*UnimplementedBusinessServiceServer) GetAllWomenSetvices(ctx context.Context, req *Empty) (*AllWomenSetvices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWomenSetvices not implemented")
}

func RegisterBusinessServiceServer(s *grpc.Server, srv BusinessServiceServer) {
	s.RegisterService(&_BusinessService_serviceDesc, srv)
}

func _BusinessService_CreateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Business)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).CreateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/CreateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).CreateBusiness(ctx, req.(*Business))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_UpdateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Business)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).UpdateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/UpdateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).UpdateBusiness(ctx, req.(*Business))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_DeleteBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).DeleteBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/DeleteBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).DeleteBusiness(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetByIdBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetByIdBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/GetByIdBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetByIdBusiness(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetAllBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetAllBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/GetAllBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetAllBusiness(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetListBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetListBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/GetListBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetListBusiness(ctx, req.(*GetListBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).CreateService(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_UpdateMenServiceByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenServices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).UpdateMenServiceByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/UpdateMenServiceByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).UpdateMenServiceByUserId(ctx, req.(*MenServices))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_UpdateWomenServiceByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WomenServices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).UpdateWomenServiceByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/UpdateWomenServiceByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).UpdateWomenServiceByUserId(ctx, req.(*WomenServices))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetMenServiceByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetMenServiceByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/GetMenServiceByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetMenServiceByUserId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetWomenServiceByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetWomenServiceByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/GetWomenServiceByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetWomenServiceByUserId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_DeleteMenServiceByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).DeleteMenServiceByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/DeleteMenServiceByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).DeleteMenServiceByUserId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_DeleteWomenServiceByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).DeleteWomenServiceByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/DeleteWomenServiceByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).DeleteWomenServiceByUserId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetAllMenSetvices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetAllMenSetvices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/GetAllMenSetvices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetAllMenSetvices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetAllWomenSetvices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetAllWomenSetvices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.BusinessService/GetAllWomenSetvices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetAllWomenSetvices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BusinessService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "business.BusinessService",
	HandlerType: (*BusinessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusiness",
			Handler:    _BusinessService_CreateBusiness_Handler,
		},
		{
			MethodName: "UpdateBusiness",
			Handler:    _BusinessService_UpdateBusiness_Handler,
		},
		{
			MethodName: "DeleteBusiness",
			Handler:    _BusinessService_DeleteBusiness_Handler,
		},
		{
			MethodName: "GetByIdBusiness",
			Handler:    _BusinessService_GetByIdBusiness_Handler,
		},
		{
			MethodName: "GetAllBusiness",
			Handler:    _BusinessService_GetAllBusiness_Handler,
		},
		{
			MethodName: "GetListBusiness",
			Handler:    _BusinessService_GetListBusiness_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _BusinessService_CreateService_Handler,
		},
		{
			MethodName: "UpdateMenServiceByUserId",
			Handler:    _BusinessService_UpdateMenServiceByUserId_Handler,
		},
		{
			MethodName: "UpdateWomenServiceByUserId",
			Handler:    _BusinessService_UpdateWomenServiceByUserId_Handler,
		},
		{
			MethodName: "GetMenServiceByUserId",
			Handler:    _BusinessService_GetMenServiceByUserId_Handler,
		},
		{
			MethodName: "GetWomenServiceByUserId",
			Handler:    _BusinessService_GetWomenServiceByUserId_Handler,
		},
		{
			MethodName: "DeleteMenServiceByUserId",
			Handler:    _BusinessService_DeleteMenServiceByUserId_Handler,
		},
		{
			MethodName: "DeleteWomenServiceByUserId",
			Handler:    _BusinessService_DeleteWomenServiceByUserId_Handler,
		},
		{
			MethodName: "GetAllMenSetvices",
			Handler:    _BusinessService_GetAllMenSetvices_Handler,
		},
		{
			MethodName: "GetAllWomenSetvices",
			Handler:    _BusinessService_GetAllWomenSetvices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "business.proto",
}

func (m *Business) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Business) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.SalonName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.SalonName)))
		i += copy(dAtA[i:], m.SalonName)
	}
	if len(m.PhoneNumbers) > 0 {
		for _, s := range m.PhoneNumbers {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.Staff) > 0 {
		for _, msg := range m.Staff {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintBusiness(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if len(m.DeletedAt) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.DeletedAt)))
		i += copy(dAtA[i:], m.DeletedAt)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Staff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.PhoneNumbers) > 0 {
		for _, s := range m.PhoneNumbers {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Cost != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(m.Cost))
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.BusinessId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.BusinessId)))
		i += copy(dAtA[i:], m.BusinessId)
	}
	if len(m.CalendarId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.CalendarId)))
		i += copy(dAtA[i:], m.CalendarId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if len(m.DeletedAt) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.DeletedAt)))
		i += copy(dAtA[i:], m.DeletedAt)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MenServices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenServices) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.HairCut {
		dAtA[i] = 0x10
		i++
		if m.HairCut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BeardCut {
		dAtA[i] = 0x18
		i++
		if m.BeardCut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HairColoring {
		dAtA[i] = 0x20
		i++
		if m.HairColoring {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SpecialHairCut {
		dAtA[i] = 0x28
		i++
		if m.SpecialHairCut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BeardColoring {
		dAtA[i] = 0x30
		i++
		if m.BeardColoring {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BeardTrim {
		dAtA[i] = 0x38
		i++
		if m.BeardTrim {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BeardShave {
		dAtA[i] = 0x40
		i++
		if m.BeardShave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FaceShave {
		dAtA[i] = 0x48
		i++
		if m.FaceShave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BoyHairCut {
		dAtA[i] = 0x50
		i++
		if m.BoyHairCut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WomenServices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WomenServices) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.HairCut {
		dAtA[i] = 0x10
		i++
		if m.HairCut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HairColoring {
		dAtA[i] = 0x18
		i++
		if m.HairColoring {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SpecialHairCut {
		dAtA[i] = 0x20
		i++
		if m.SpecialHairCut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EyebrowArching {
		dAtA[i] = 0x28
		i++
		if m.EyebrowArching {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServiceTypeDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceTypeDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MenService != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(m.MenService.Size()))
		n1, err1 := m.MenService.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.WomenService != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(m.WomenService.Size()))
		n2, err2 := m.WomenService.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Id) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Id) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAllBusinessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllBusinessResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Business) > 0 {
		for _, msg := range m.Business {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBusiness(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetListBusinessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetListBusinessRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(m.Limit))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBusiness(dAtA, i, uint64(m.Page))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllMenSetvices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllMenSetvices) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MenServices) > 0 {
		for _, msg := range m.MenServices {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBusiness(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllWomenSetvices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllWomenSetvices) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WomenServices) > 0 {
		for _, msg := range m.WomenServices {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBusiness(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBusiness(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Business) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.SalonName)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	if len(m.PhoneNumbers) > 0 {
		for _, s := range m.PhoneNumbers {
			l = len(s)
			n += 1 + l + sovBusiness(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	if len(m.Staff) > 0 {
		for _, e := range m.Staff {
			l = e.Size()
			n += 1 + l + sovBusiness(uint64(l))
		}
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Staff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	if len(m.PhoneNumbers) > 0 {
		for _, s := range m.PhoneNumbers {
			l = len(s)
			n += 1 + l + sovBusiness(uint64(l))
		}
	}
	if m.Cost != 0 {
		n += 1 + sovBusiness(uint64(m.Cost))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.BusinessId)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.CalendarId)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	if m.HairCut {
		n += 2
	}
	if m.BeardCut {
		n += 2
	}
	if m.HairColoring {
		n += 2
	}
	if m.SpecialHairCut {
		n += 2
	}
	if m.BeardColoring {
		n += 2
	}
	if m.BeardTrim {
		n += 2
	}
	if m.BeardShave {
		n += 2
	}
	if m.FaceShave {
		n += 2
	}
	if m.BoyHairCut {
		n += 2
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WomenServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	if m.HairCut {
		n += 2
	}
	if m.HairColoring {
		n += 2
	}
	if m.SpecialHairCut {
		n += 2
	}
	if m.EyebrowArching {
		n += 2
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceTypeDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MenService != nil {
		l = m.MenService.Size()
		n += 1 + l + sovBusiness(uint64(l))
	}
	if m.WomenService != nil {
		l = m.WomenService.Size()
		n += 1 + l + sovBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBusiness(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllBusinessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Business) > 0 {
		for _, e := range m.Business {
			l = e.Size()
			n += 1 + l + sovBusiness(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetListBusinessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovBusiness(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovBusiness(uint64(m.Page))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllMenSetvices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MenServices) > 0 {
		for _, e := range m.MenServices {
			l = e.Size()
			n += 1 + l + sovBusiness(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllWomenSetvices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WomenServices) > 0 {
		for _, e := range m.WomenServices {
			l = e.Size()
			n += 1 + l + sovBusiness(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBusiness(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBusiness(x uint64) (n int) {
	return sovBusiness(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Business) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Business: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Business: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SalonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumbers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumbers = append(m.PhoneNumbers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staff = append(m.Staff, &Staff{})
			if err := m.Staff[len(m.Staff)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Staff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumbers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumbers = append(m.PhoneNumbers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalendarId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalendarId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenServices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenServices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenServices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HairCut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HairCut = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeardCut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeardCut = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HairColoring", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HairColoring = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialHairCut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpecialHairCut = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeardColoring", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeardColoring = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeardTrim", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeardTrim = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeardShave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeardShave = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceShave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FaceShave = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoyHairCut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoyHairCut = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WomenServices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WomenServices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WomenServices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HairCut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HairCut = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HairColoring", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HairColoring = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialHairCut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpecialHairCut = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EyebrowArching", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EyebrowArching = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceTypeDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceTypeDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceTypeDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MenService == nil {
				m.MenService = &MenServices{}
			}
			if err := m.MenService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WomenService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WomenService == nil {
				m.WomenService = &WomenServices{}
			}
			if err := m.WomenService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Id) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Id: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Id: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllBusinessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllBusinessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllBusinessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = append(m.Business, &Business{})
			if err := m.Business[len(m.Business)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetListBusinessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetListBusinessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetListBusinessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllMenSetvices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllMenSetvices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllMenSetvices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MenServices = append(m.MenServices, &MenServices{})
			if err := m.MenServices[len(m.MenServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllWomenSetvices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusiness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllWomenSetvices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllWomenSetvices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WomenServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusiness
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusiness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WomenServices = append(m.WomenServices, &WomenServices{})
			if err := m.WomenServices[len(m.WomenServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusiness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusiness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBusiness(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBusiness
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBusiness
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBusiness
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBusiness
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBusiness
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBusiness(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBusiness
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBusiness = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBusiness   = fmt.Errorf("proto: integer overflow")
)
